/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.gbsfo.kafka.payment;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PaymentDeleted extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8462052147639222342L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentDeleted\",\"namespace\":\"com.gbsfo.kafka.payment\",\"fields\":[{\"name\":\"payment_id\",\"type\":\"long\",\"doc\":\"Payment's ID\"},{\"name\":\"number\",\"type\":\"string\",\"doc\":\"Name\"},{\"name\":\"sum\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"paymentDateTime\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp\"}],\"doc\":\"Payment Date Time\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PaymentDeleted> ENCODER =
      new BinaryMessageEncoder<PaymentDeleted>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentDeleted> DECODER =
      new BinaryMessageDecoder<PaymentDeleted>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PaymentDeleted> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PaymentDeleted> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PaymentDeleted>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PaymentDeleted to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PaymentDeleted from a ByteBuffer. */
  public static PaymentDeleted fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Payment's ID */
  @Deprecated public long payment_id;
  /** Name */
  @Deprecated public java.lang.CharSequence number;
  @Deprecated public java.nio.ByteBuffer sum;
  /** Payment Date Time */
  @Deprecated public java.lang.Long paymentDateTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentDeleted() {}

  /**
   * All-args constructor.
   * @param payment_id Payment's ID
   * @param number Name
   * @param sum The new value for sum
   * @param paymentDateTime Payment Date Time
   */
  public PaymentDeleted(java.lang.Long payment_id, java.lang.CharSequence number, java.nio.ByteBuffer sum, java.lang.Long paymentDateTime) {
    this.payment_id = payment_id;
    this.number = number;
    this.sum = sum;
    this.paymentDateTime = paymentDateTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return payment_id;
    case 1: return number;
    case 2: return sum;
    case 3: return paymentDateTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: payment_id = (java.lang.Long)value$; break;
    case 1: number = (java.lang.CharSequence)value$; break;
    case 2: sum = (java.nio.ByteBuffer)value$; break;
    case 3: paymentDateTime = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'payment_id' field.
   * @return Payment's ID
   */
  public java.lang.Long getPaymentId() {
    return payment_id;
  }

  /**
   * Sets the value of the 'payment_id' field.
   * Payment's ID
   * @param value the value to set.
   */
  public void setPaymentId(java.lang.Long value) {
    this.payment_id = value;
  }

  /**
   * Gets the value of the 'number' field.
   * @return Name
   */
  public java.lang.CharSequence getNumber() {
    return number;
  }

  /**
   * Sets the value of the 'number' field.
   * Name
   * @param value the value to set.
   */
  public void setNumber(java.lang.CharSequence value) {
    this.number = value;
  }

  /**
   * Gets the value of the 'sum' field.
   * @return The value of the 'sum' field.
   */
  public java.nio.ByteBuffer getSum() {
    return sum;
  }

  /**
   * Sets the value of the 'sum' field.
   * @param value the value to set.
   */
  public void setSum(java.nio.ByteBuffer value) {
    this.sum = value;
  }

  /**
   * Gets the value of the 'paymentDateTime' field.
   * @return Payment Date Time
   */
  public java.lang.Long getPaymentDateTime() {
    return paymentDateTime;
  }

  /**
   * Sets the value of the 'paymentDateTime' field.
   * Payment Date Time
   * @param value the value to set.
   */
  public void setPaymentDateTime(java.lang.Long value) {
    this.paymentDateTime = value;
  }

  /**
   * Creates a new PaymentDeleted RecordBuilder.
   * @return A new PaymentDeleted RecordBuilder
   */
  public static com.gbsfo.kafka.payment.PaymentDeleted.Builder newBuilder() {
    return new com.gbsfo.kafka.payment.PaymentDeleted.Builder();
  }

  /**
   * Creates a new PaymentDeleted RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentDeleted RecordBuilder
   */
  public static com.gbsfo.kafka.payment.PaymentDeleted.Builder newBuilder(com.gbsfo.kafka.payment.PaymentDeleted.Builder other) {
    return new com.gbsfo.kafka.payment.PaymentDeleted.Builder(other);
  }

  /**
   * Creates a new PaymentDeleted RecordBuilder by copying an existing PaymentDeleted instance.
   * @param other The existing instance to copy.
   * @return A new PaymentDeleted RecordBuilder
   */
  public static com.gbsfo.kafka.payment.PaymentDeleted.Builder newBuilder(com.gbsfo.kafka.payment.PaymentDeleted other) {
    return new com.gbsfo.kafka.payment.PaymentDeleted.Builder(other);
  }

  /**
   * RecordBuilder for PaymentDeleted instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentDeleted>
    implements org.apache.avro.data.RecordBuilder<PaymentDeleted> {

    /** Payment's ID */
    private long payment_id;
    /** Name */
    private java.lang.CharSequence number;
    private java.nio.ByteBuffer sum;
    /** Payment Date Time */
    private java.lang.Long paymentDateTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.gbsfo.kafka.payment.PaymentDeleted.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.payment_id)) {
        this.payment_id = data().deepCopy(fields()[0].schema(), other.payment_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.number)) {
        this.number = data().deepCopy(fields()[1].schema(), other.number);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sum)) {
        this.sum = data().deepCopy(fields()[2].schema(), other.sum);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.paymentDateTime)) {
        this.paymentDateTime = data().deepCopy(fields()[3].schema(), other.paymentDateTime);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentDeleted instance
     * @param other The existing instance to copy.
     */
    private Builder(com.gbsfo.kafka.payment.PaymentDeleted other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.payment_id)) {
        this.payment_id = data().deepCopy(fields()[0].schema(), other.payment_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.number)) {
        this.number = data().deepCopy(fields()[1].schema(), other.number);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sum)) {
        this.sum = data().deepCopy(fields()[2].schema(), other.sum);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.paymentDateTime)) {
        this.paymentDateTime = data().deepCopy(fields()[3].schema(), other.paymentDateTime);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'payment_id' field.
      * Payment's ID
      * @return The value.
      */
    public java.lang.Long getPaymentId() {
      return payment_id;
    }

    /**
      * Sets the value of the 'payment_id' field.
      * Payment's ID
      * @param value The value of 'payment_id'.
      * @return This builder.
      */
    public com.gbsfo.kafka.payment.PaymentDeleted.Builder setPaymentId(long value) {
      validate(fields()[0], value);
      this.payment_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'payment_id' field has been set.
      * Payment's ID
      * @return True if the 'payment_id' field has been set, false otherwise.
      */
    public boolean hasPaymentId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'payment_id' field.
      * Payment's ID
      * @return This builder.
      */
    public com.gbsfo.kafka.payment.PaymentDeleted.Builder clearPaymentId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'number' field.
      * Name
      * @return The value.
      */
    public java.lang.CharSequence getNumber() {
      return number;
    }

    /**
      * Sets the value of the 'number' field.
      * Name
      * @param value The value of 'number'.
      * @return This builder.
      */
    public com.gbsfo.kafka.payment.PaymentDeleted.Builder setNumber(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.number = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'number' field has been set.
      * Name
      * @return True if the 'number' field has been set, false otherwise.
      */
    public boolean hasNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'number' field.
      * Name
      * @return This builder.
      */
    public com.gbsfo.kafka.payment.PaymentDeleted.Builder clearNumber() {
      number = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sum' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getSum() {
      return sum;
    }

    /**
      * Sets the value of the 'sum' field.
      * @param value The value of 'sum'.
      * @return This builder.
      */
    public com.gbsfo.kafka.payment.PaymentDeleted.Builder setSum(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.sum = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sum' field has been set.
      * @return True if the 'sum' field has been set, false otherwise.
      */
    public boolean hasSum() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sum' field.
      * @return This builder.
      */
    public com.gbsfo.kafka.payment.PaymentDeleted.Builder clearSum() {
      sum = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentDateTime' field.
      * Payment Date Time
      * @return The value.
      */
    public java.lang.Long getPaymentDateTime() {
      return paymentDateTime;
    }

    /**
      * Sets the value of the 'paymentDateTime' field.
      * Payment Date Time
      * @param value The value of 'paymentDateTime'.
      * @return This builder.
      */
    public com.gbsfo.kafka.payment.PaymentDeleted.Builder setPaymentDateTime(java.lang.Long value) {
      validate(fields()[3], value);
      this.paymentDateTime = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentDateTime' field has been set.
      * Payment Date Time
      * @return True if the 'paymentDateTime' field has been set, false otherwise.
      */
    public boolean hasPaymentDateTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'paymentDateTime' field.
      * Payment Date Time
      * @return This builder.
      */
    public com.gbsfo.kafka.payment.PaymentDeleted.Builder clearPaymentDateTime() {
      paymentDateTime = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentDeleted build() {
      try {
        PaymentDeleted record = new PaymentDeleted();
        record.payment_id = fieldSetFlags()[0] ? this.payment_id : (java.lang.Long) defaultValue(fields()[0], record.getConversion(0));
        record.number = fieldSetFlags()[1] ? this.number : (java.lang.CharSequence) defaultValue(fields()[1], record.getConversion(1));
        record.sum = fieldSetFlags()[2] ? this.sum : (java.nio.ByteBuffer) defaultValue(fields()[2], record.getConversion(2));
        record.paymentDateTime = fieldSetFlags()[3] ? this.paymentDateTime : (java.lang.Long) defaultValue(fields()[3], record.getConversion(3));
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentDeleted>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentDeleted>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentDeleted>
    READER$ = (org.apache.avro.io.DatumReader<PaymentDeleted>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
